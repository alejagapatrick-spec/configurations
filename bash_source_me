#!/bin/bash
# Note 1: Add this line `source ~/configurations/bash_source_me` in
# ~/.bash_profile (for MacOSX) or ~/.bashrc (for Linux)
#
# Note 2: Since MacOSX and Linux use ~/.bashrc and ~/.bash_profile in different
# ways, add the following lines to ~/.bash_profile to make sure ~/.bashrc is
# loaded correctly.
# ```
# if [ -f ~/.bashrc ]; then
#     source ~/.bashrc
# fi
# ```

platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    platform='Linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='Darwin'
fi

# START: default language
if [[ $platform == 'Linux' ]]; then
    export LC_ALL="en_US.UTF-8"
    export LC_CTYPE="en_US.UTF-8"
fi
# END: default language

# START: git-completion
# Use homebrew's git completion script here or the script in configurations.git:
# GIT_COMPLETION_BASH=~/configurations/git/git-completion.bash
GIT_COMPLETION_BASH=/usr/local/etc/bash_completion.d/git-completion.bash
if [[ $platform == 'Darwin' ]] && [ -f ${GIT_COMPLETION_BASH} ]; then
    . ${GIT_COMPLETION_BASH}
fi
# END: git-completion

# START: powerline-shell
function _update_ps1() {
    PS1="$(~/bin/powerline-shell.py $? 2> /dev/null)"
}
if [ -f ~/bin/powerline-shell.py ] && [ "$TERM" != "linux" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi
# END: powerline-shell

# START: CUDA
if [[ $platform == 'Linux' ]]; then
    export CUDA_HOME=/usr/local/cuda
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64"
    export PATH="$CUDA_HOME/bin:$PATH"
elif [[ $platform == 'Darwin' ]]; then
    export CUDA_HOME=/usr/local/cuda
    export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$CUDA_HOME/lib"
    export PATH="$CUDA_HOME/bin:$PATH"
fi
# END: CUDA

# START: rust
# rust package management
if [ -f ~/.cargo/env ]; then
    source ~/.cargo/env
fi
# END: rust

# START: MozillaFirefox
export MOZILLA_ROOT=~/Projects/mozilla
export MOZILLA_SRC_ROOT=${MOZILLA_ROOT}/src/gecko
export MOZILLA_SRC_ROOT_PREFIX=/gecko/
export MACH_NOTIFY_MINTIME=10
if [ -f ${MOZILLA_SRC_ROOT}/python/mach/bash-completion.sh ]; then
    source ${MOZILLA_SRC_ROOT}/python/mach/bash-completion.sh
fi

PATH=~/.mozbuild/version-control-tools/git/commands\
:${MOZILLA_ROOT}/tools/moz-git-tools\
:${MOZILLA_ROOT}/tools/git-cinnabar\
:${MOZILLA_ROOT}/tools/build-tooltool\
:${MOZILLA_ROOT}/tools/git-bz-moz\
:$PATH

# END: MozillaFirefox

# START: helper
stack() {
  op=$1
  name=$2
  value=$3
  file=/tmp/bash_stack_$name.$$

  case $op in
  push)
    echo $value >> $file
    ;;
  pop)
    if [ -f $file ]; then
      tail -1 $file
      sed -i DME -e '$d' $file
      rm ${file}DME
    fi
    ;;
  esac
}
ga() { grep -rn ./ -e $1;}
if [[ $platform == 'Linux' ]]; then
  alias td="notify-send \"Terminal\" \"Something done!!!\""
elif [[ $platform == 'Darwin' ]]; then
  alias td="terminal-notifier -title \"Terminal\" -message \"Something done!!!\""
fi
alias kDS_Store="find . -name \'*.DS_Store\' -type f -delete"
alias kDot_="find . -name \'._*\' -type f -delete"
alias kUdFuse="kill `ps aux | grep udFuse | grep -v grep | awk '{print $2}'`"
alias vtmux="tmux -V | cut -d' ' -f2"
# Force tmux to assume the terminal supports 256 colours.
if [[ $platform == 'Linux' ]]; then
    alias tmux="tmux -2"
fi
# alias du_cc='du -sh'
# alias du_sf='du -d1 -h'
# END: helper

# START: path
PATH=~/configurations/bin\
:~/bin\
:$PATH

if [[ $platform == 'Darwin' ]]; then
  PATH=/usr/local/sbin:$PATH
fi
# END: path
