#!/usr/bin/env sh

set -e
ROOT_DIR=`git rev-parse --show-toplevel`
WORKING_LIST_FILE=${ROOT_DIR}/.gitow

CL_GREEN=`tput setaf 2`
CL_RED=`tput setaf 1`
CL_BLUE=`tput setaf 6`
CL_END=`tput op`

usage() {
  echo "usage: git ow <subcommand>"
  echo
  echo "Available subcommands are:"
  echo "rebase"
  echo "add"
  echo "list / ls"
  echo "show"
}

version() {
  echo "ow git plugin v1.0"
  echo
}

cmd_add() {
  CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
  echo ${CURRENT_BRANCH} >> $WORKING_LIST_FILE
}

cmd_list() {
  cat ${WORKING_LIST_FILE}
}

cmd_ls() {
  cmd_list
}

cmd_show() {
  for line in `grep ^[^@#] ${WORKING_LIST_FILE} | awk '{print $1}'`; do
    git show ${line} --no-patch
  done
}

# Example of WORKING_LIST_FILE:
#
# feature1
# feature2
# feature3 feature2
# feature4
#
cmd_rebase() {
  DEFAULT_BRANCH=master
  REMOTE_ORIGIN=origin
  REMOTE_UPSTREAM=upstream

  # Parse configuration lines
  while IFS= read -r line; do
    set +e
    COMMENT=`echo $line | grep "^#"`
    if [ -n "${COMMENT}" ]; then
      echo "$line"
      continue
    fi
    CONFIG=`echo $line | grep "^@"`
    if [ -n "${CONFIG}" ]; then
      local config=`echo $line | sed 's/^@//'`
      echo "[Config] $config"
      eval "$config"
      continue
    fi
    set -e
  done <"$WORKING_LIST_FILE"

  # Synchronizing DEFAULT_BRANCH
  # echo "====> Synchronizing ${REMOTE_UPSTREAM} to ${REMOTE_ORIGIN} <===="
  # git rebase ${REMOTE_UPSTREAM}/${DEFAULT_BRANCH} ${DEFAULT_BRANCH}
  # git push $REMOTE_ORIGIN HEAD
  echo ""

  while IFS= read -r line; do
    set +e
    # Skip the line of comment and config
    COMMENT=`echo $line | grep "^#"`
    [ -n "${COMMENT}" ] && continue
    CONFIG=`echo $line | grep "^@"`
    [ -n "${CONFIG}" ] && continue
    set -e

    branchName=`echo $line | awk '{print $1}'`
    _currentParent=`echo $line | awk '{print $2}'`
    if [ -z "${_currentParent}" ]; then
      _currentParent=$DEFAULT_BRANCH
    fi
    echo "====> Working on branch: ["${CL_GREEN}${branchName}${CL_END}"] <===="
    echo "                Rebasing ["${branchName}"]"
    echo "                based on ["${CL_BLUE}${_currentParent}${CL_END}"] ..."
    echo "Commit List:"
    for echoCommitHash in `git log ${_currentParent}..${branchName} --pretty=format:"%H" --no-patch --reverse`; do
      echo "HASH: "$echoCommitHash
    done
    echo "============"
    git rebase $_currentParent $branchName
    # git push $REMOTE_ORIGIN HEAD -f
  done <"$WORKING_LIST_FILE"
}

main() {
  if [ "$#" -lt 1 ]; then
    usage; exit 1
  fi

  local subcommand="$1"; shift

  case $subcommand in
    "-h"|"--help")
      usage; exit 0
      ;;
    "-v"|"--version")
      version; exit 0
      ;;
  esac

  set +e
  OUTPUT=`type "cmd_$subcommand"`
  if [ $? -ne 0 ]; then
    usage; exit 1
  fi
  set -e

  cmd_$subcommand "$@"
}

main "$@"

